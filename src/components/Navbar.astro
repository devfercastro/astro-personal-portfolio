---
import { capFirstLetter } from "@src/utils/utils";

interface Props {
	sections: { id: string; url: string }[];
	tailwindClass: string;
}

const { sections, tailwindClass } = Astro.props;

export const prerender = true;
---
<nav class={tailwindClass} >
  <ul class="w-full flex flex-col justify-start items-start gap-y-5">
    {sections.map(({url, id}) => (
      <li class="w-full">
        <a
          href={url}
          class="flex w-full px-5 py-3 rounded-md font-medium text-lg text-left hover:bg-[var(--nav-btn-highlight)] hover:shadow-lg hover:text-[var(--text)] transition-all duration-300"
          aria-label={id}
        >
          {capFirstLetter(id)}
        </a>
      </li>
    ))}
  </ul>
</nav>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    // Get all sections
    const sections = document.querySelectorAll("section.content-section");
    // Get all nav buttons
    const navItems = document.querySelectorAll("nav ul li a");

    const callback = (entries) => {
      entries.forEach((entry) => {
        // If the section is visible
        if(entry.isIntersecting) {
          navItems.forEach((item) => {
            // If the nav item belongs to the current section
            if(item.getAttribute("aria-label") === entry.target.id) {
              // Add the highlight
              item.classList.add("bg-[var(--bg-alt)]", "text-[var(--text-alt)]");
            } else {
              // Remove the highlight
              item.classList.remove("bg-[var(--bg-alt)]", "text-[var(--text-alt)]");
            }
          })
        }
      })
    }

    sections.forEach((section) => {
      // Get the section height
      const sectionHeight = section.getBoundingClientRect().height;
      // Dinamically set the threshold based on the section height
      const threshold = sectionHeight > window.innerHeight ? 0.4 : 1;

      // Create a custom observer for the current section
      const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px",
        threshold: threshold,
      })

      // Observe the section
      observer.observe(section);
    })
  })
</script>
