---
interface Props {
  sections: Section[];
	tailwindClass: string;
}

const { sections, tailwindClass} = Astro.props;

export const prerender = true;
---
<nav class={tailwindClass} >
  <ul class="w-full flex flex-col justify-start items-start gap-y-5">
    {sections.map(({id, label}) => (
      <li class="w-full">
        <button
          class="flex w-full px-5 py-3 rounded-md font-medium text-lg text-left hover:bg-[var(--nav-btn-highlight)] hover:shadow-lg hover:text-[var(--text)] transition-all duration-300"
          aria-label={id}
        >
          {label}
        </button>
      </li>
    ))}
  </ul>
</nav>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const sectionsContainer = document.querySelector("#sectionsContainer");
    // Get all sections
    const sections = document.querySelectorAll("section.content-section");
    // Get all nav buttons
    const navItems = document.querySelectorAll("nav ul li button");

    navItems.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();

        // Get the target section
        const targetId = e.target.getAttribute("aria-label");
        const targetSection = document.getElementById(targetId);

        if (targetSection && sectionsContainer) {
          // Get the parent container rect
          const containerRect = sectionsContainer.getBoundingClientRect();
          // Get the target section rect
          const targetRect = targetSection.getBoundingClientRect();
          // Calculate the relative top
          const relativeTop = targetRect.top - containerRect.top;

          const offset = 50;

          // Scroll to the target section
          sectionsContainer.scrollTo({
            top: sectionsContainer.scrollTop + relativeTop - offset,           behavior: "smooth"
          })
        }
      })
    })

    const callback = (entries) => {
      entries.forEach((entry) => {
        // If the section is visible
        if(entry.isIntersecting) {
          navItems.forEach((item) => {
            // If the nav item belongs to the current section
            if(item.getAttribute("aria-label") === entry.target.id) {
              // Add the highlight
              item.classList.add("bg-[var(--text-primary)]", "text-[var(--text-alt)]");
            } else {
              // Remove the highlight
              item.classList.remove("bg-[var(--text-primary)]", "text-[var(--text-alt)]");
            }
          })
        }
      })
    }

    sections.forEach((section) => {
      // Get the section height
      const sectionHeight = section.getBoundingClientRect().height;
      // Dinamically set the threshold based on the section height
      const threshold = sectionHeight > window.innerHeight ? 0.4 : 0.8;

      // Create a custom observer for the current section
      const observer = new IntersectionObserver(callback, {
        root: null,
        threshold: threshold,
      })

      // Observe the section
      observer.observe(section);
    })
  })
</script>
